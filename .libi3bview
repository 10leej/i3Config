#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - $HOME/.libi3bview
# Started On        - Wed  8 Mar 18:41:22 GMT 2017
# Last Change       - Wed  7 Mar 00:40:40 GMT 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# This was written for Ubuntu and Ubuntu-based distributions of Linux, with i3-wm.
# However, the outputs these functions offer can still be used outside of i3-wm.
#----------------------------------------------------------------------------------

#TODO - Do away with as many instances of sed as possible.

[ $UID -eq 0 ] && exit 1

#---------------------------------------------------------------------YOUR SETTINGS

# Your YouTube 'about' page URL goes here.
YT_URL="https://www.youtube.com/channel/UCfp-lNJy4QkIGnaEE6NtDSg/about"

# Your GitHub URL goes here.
GH_URL="https://github.com/terminalforlife"

YT_PAD=3                          # Spaces to pad for the YouTube subscriber count.
IFACE="enp3s0"                    # What is your network interface name?
CORES=4                           # How many cores does your CPU have?
ROOT_DEV="/dev/sda1"              # What is the name of your root file system?
ROOT_DEV_PAD=7                    # Spaces to pad the root's disk usage.
HOME_DEV="/dev/sdb1"              # What is the name of your home file system?*1
HOME_DEV_PAD=7                    # Spaces to pad the home's disk usage.
CD_TARGET="2018-12-25"            # What is the target of your countdown?
CD_PAD=10                         # Spaces to pad for the in-seconds countdown.
TERMINAL="terminology"            # Which one terminal do you use? (file name)

#----------------------------------------------------------YOUTUBE SUBSCRIBER COUNT

ytsubcount(){
	while read -a X; do
		if [[ "${X[@]}" =~ \"[0-9]+\ subscribers\"\>[0-9,]+\< ]]; then
			for N in `eval printf "%s\\\\\n" {0..${#X[@]}}`; {
				if [[ "${X[0+${N}]}" =~ subscribers ]]; then
					printf "%'3d" "${X[$N]//[!0-9]}"
					break 2
				fi
			}
		fi
	done <<< "$(/usr/bin/wget -q "$YT_URL" -O -)"
}

#----------------------------------------------------------YOUTUBE TOTAL VIEW COUNT

#TODO - Sometimes this vanishes from the bar. Why?

ytviewcount(){
	MATCH='<span class="about-stat"> &bull; <b>[0-9,]+</b> views</span>'
	while read -a X; do
		if [[ "${X[@]}" =~ $MATCH ]]; then
			printf "%'6d" "${X[3]//[!0-9]}"
			break
		fi
	done <<< "$(/usr/bin/wget -q "$YT_URL" -O -)"
}

#-----------------------------------------------------------UPGRADE COUNT (apt-get)

apt_pkg_changes(){
	OPT='APT::Get::Show-User-Simulation-Note=0'
	while read -a X; do
		if [[ "${X[*]}" == *not\ to\ upgrade. ]]; then
			SUM="$((${X[0]}+${X[3]}+${X[7]}+${X[11]}))"
			printf "%2d" "$SUM"
			break
		fi
	done <<< "$(/usr/bin/apt-get -o $OPT -qs dist-upgrade)"
}

#--------------------------------------------------------CONNECTED USB DEVICE COUNT

usb_count(){
	readarray X <<< "$(/usr/bin/lsusb)"
	printf "%2d\n" "${#X[@]}"
}

#--------------------------------------------------------COUNT OF PROCESSES (ps -a)

psa_count(){
	read -a PIDS <<< `/bin/ps --user ichy -ax -o pid=`
	printf "%'3d\n" "${#PIDS[@]}"
}

#-----------------------------------------------------------MOCP CURRENT TRACK INFO

mocp_info(){
	STATUS=`/usr/bin/mocp -i || printf "N/A"`
	case "${STATUS/* }" in
		STOP)
			printf "00:00/00:00" ;;
		N/A)
			printf "??:??/??:??" ;;
		*)
			/usr/bin/mocp -Q %ct/%tt ;;
	esac
}

#------------------------------------------------------------------OPEN FILES COUNT

open_files_count(){
	readarray X <<< "$(/usr/bin/lsof -t -u $UID 2> /dev/null)"
	printf "%3d" "${#X[@]}"
}

#------------------------------------------------------------------------USER COUNT

user_count(){
	declare -i D=0
	if [ -x /usr/bin/users ]; then
		read -a X <<< "$(/usr/bin/users)"
		printf "%2d" "${#X[@]}"
	elif [ -x /usr/bin/uptime ]; then
		while read -a X; do
			if [[ "${X[3]}" =~ [0-9]+ ]]; then
				printf "%s\n" "${X[3]}"
				break
			fi
		done <<< "$(/usr/bin/uptime)"
	else
		printf "!"
	fi
}

#--------------------------------------------------------STORAGE DEVICE MOUNT COUNT

mount_count(){
	declare -i C=0
	while read -a X; do
		[[ "${X[0]}" == /dev/* ]] && C+=1
	done < /proc/mounts

	printf "%2d" "$C"
}

#-----------------------------------------------------------INTERNET STATUS (iface)

net_status(){
	while read -a X; do
		if [ "${X[1]%:}${X[7]}" == "${IFACE}state" ]; then
			printf -v Z "${X[8]}"
			break
		fi
	done <<< "$(/bin/ip link)"
	[ "$Z" == "UP" ] && printf "[0]" || printf "[1]"
}

#--------------------------------------------------------MOST CPU-DEMANDING PROCESS

max_proc_usage(){
	read -a X <<< "$(/bin/ps -aU "$USER" -o %cpu=,pid= -k -%cpu)"
	printf "%3d (%.5d)\n" "${X[0]}" "${X[1]}"
}

#--------------------------------------------------------------------SESSION UPTIME

session_uptime(){
	IFS="." read -a X < /proc/uptime
	printf "%4d" "$((X[0]/60))"
}

#-----------------------------------------------------------------AVERAGE CPU USAGE

avg_cpu_usage(){
	#TODO - Improve this. Should work properly now, but using awk and iostat.
	AWK='{if($3~"^[0-9.]+$")printf("%6.2f%%\n", 100-$6)}'
	/usr/bin/iostat -c | /usr/bin/awk -S "$AWK"
}

#----------------------------------------------------ROUGH CPU USAGE (EXPERIMENTAL)

rough_cpu_usage(){
	# Requires the sysstat package in Ubuntu- and Debian-based systems.
	while read -a X; do
		if [ "${X[1]}" == "all" ]; then
			printf "%3d%%\n" "$((100-${X[11]%.*}))"
			break
		fi
	done <<< "$(/usr/bin/mpstat 1 1)"
}

#------------------------------------------------------------KERNEL VERSION DISPLAY

kernel_check(){
	K="/proc/sys/kernel/osrelease"
	[ -f "$K" -a -r "$K" ] && printf "%19s" "`< $K`"
}

#---------------------------------------------------------CPU FREQUENCY (QUAD-CORE)

cpu_freq(){
	#TODO - Sometimes incorrect values are displayed. (still!)
	declare -a B=()
	for FILE in /sys/devices/system/cpu/cpufreq/policy*/scaling_cur_freq; {
		read V < "$FILE" && B+=($V)
	}

	declare -i A=0
	for FREQ in ${B[@]}; { A+=$FREQ; }
	printf "%4.4sMHz\n" "$((A/CORES))"
}

#-----------------------------------------------------------PLAYBACK VOLUME (pactl)

output_volume_pacmd(){
	while read -a X; do
		if [ "${X[0]}" == volume: ]; then
			printf "%3d%%" "${X[4]%\%}"
			break
		fi
	done <<< "$(/usr/bin/pacmd list-sinks)"
}

#---------------------------------------------------------MICROPHONE STATUS (pacmd)

input_volume_pacmd(){
	# If you only have one mic device, you'll want to omit the check for the
	# FIRST. I use this because I have an external mixer and the system's own
	# mic port, but I don't use the first (system's), just the mixer's.
	while read -a X; do
		if [ "${X[0]}" == volume: ]; then
			if ! [ "$FIRST" == "true" ]; then
				FIRST="true"
				continue
			fi

			printf "%3d%%" "${X[4]%\%}"
			break
		fi
	done <<< "$(/usr/bin/pacmd list-sources)"
}

#---------------------------------------------------------COUNTDOWN UNTIL (SECONDS)

countdown(){
	printf -v NOW "%(%F)T\n" "-1"
	RESULT=$((`/bin/date -d "$CD_TARGET" +%s` - `printf '%(%s)T'`))
	printf "%'${CD_PAD}d" "$RESULT"
}

#--------------------------------------------------------------------RAM USED IN MB

ram_used_mb(){
	while read -a X; do
		if [ "${X[0]}" == "Mem:" ]; then
			printf "%'6dM\n" "${X[2]}"
			break
		fi
	done <<< "$(/usr/bin/free -m)"
}

#-------------------------------------------------------------------SWAP USED IN MB

swap_used_mb(){
	while read -a X; do
		if [ "${X[0]}" == "Swap:" ]; then
			printf "%'6dM\n" "${X[2]}"
			break
		fi
	done <<< "$(/usr/bin/free -m)"
}

#----------------------------------------------------------USED SPACE IN HOME IN MB

home_space_used_mb(){
	while read -a X; do
		if [ "${X[0]}" == "$HOME_DEV" ]; then
			printf "%'${HOME_DEV_PAD}dM\n" "${X[2]}"
			break
		fi
	done <<< "$(/bin/df -m)"
}

#----------------------------------------------------------USED SPACE IN ROOT IN MB

root_space_used_mb(){
	while read -a X; do
		if [ "${X[0]}" == "$ROOT_DEV" ]; then
			printf "%'${ROOT_DEV_PAD}dM\n" "${X[2]}"
			break
		fi
	done <<< "$(/bin/df -m)"
}

#------------------------------------------------------------SESSION DOWNLOAD TOTAL

session_dl_total(){
	while read -a X; do
		if [ "${X[0]}" == "$IFACE:" ]; then
			printf "%'6dM" "$((${X[1]}/1024/1024))"
			break
		fi
	done < /proc/net/dev
}

#--------------------------------------------------------------SESSION UPLOAD TOTAL

session_ul_total(){
	while read -a X; do
		if [ "${X[0]}" == "$IFACE:" ]; then
			printf "%'6dM" "$((${X[9]}/1024/1024))"
			break
		fi
	done < /proc/net/dev
}

#---------------------------------------------------SESSION UPLOAD & DOWNLOAD TOTAL

session_ul_dl_total(){
	while read -a X; do
		if [ "${X[0]}" == "$IFACE:" ]; then
			printf "%'6dM " "$((${X[1]}/1024/1024))"
			printf "%'6dM" "$((${X[9]}/1024/1024))"
			break
		fi
	done < /proc/net/dev
}

#------------------------------------------------------------------ACTIVE TCP COUNT

estab_tcp_count(){
	readarray X <<< "$(/bin/ss --tcp -n)"
	printf "%3d" "$((${#X[@]}-1))"
}

#---------------------------------------------------------------LISTENING TCP COUNT

listening_tcp_count(){
	readarray X <<< "$(/bin/ss --tcp -l -n)"
	printf "%3d" "$((${#X[@]}-1))"
}

#------------------------------------------------------LISTENING & ACTIVE TCP COUNT

listening_estab_tcp_count(){
	readarray X <<< "$(/bin/ss --tcp -n)"
	printf "%3d " "$((${#X[@]}-1))"

	#TODO - Combine these so as to avoid opening 2 processes.

	readarray X <<< "$(/bin/ss --tcp -l -n)"
	printf "%3d " "$((${#X[@]}-1))"
}

#-------------------------------------------------------------------CPU TEMPERATURE

cpu_temp(){
	while read -a X; do
		[ "${X[0]}${X[2]}" == "Physical0:" ] && LINE="true"
		if [ "${X[0]}" == "temp1_input:" -a "$LINE" == "true" ]; then
			printf "%2dÂ°C" "${X[1]%.*}"
			break
		fi
	done <<< "$(/usr/bin/sensors -u)"
}

#-------------------------------------------------------------------------SHOW DATE

date_show(){
	printf "%(%d/%m/%Y)T"
}

#-------------------------------------------------------------------------SHOW TIME

time_show(){
	printf "%(%l:%M:%S%p)T "
}

#---------------------------------------------------------------------DATE AND TIME

show_date_time(){
	printf "%((%d/%m/%Y) %l:%M:%S%p)T "
}

#--------------------------------------------------------------STORAGE DEVICE COUNT

storage_device_count(){
	readarray X < /proc/partitions
	printf "%2d" "$((${#X[@]}-2))"
}

#------------------------------------------------------LATEST STABLE KERNEL VERSION

latest_stable_kernel(){
	KERN_URL="https://www.kernel.org/"
	RE='<strong>[0-9]+.[0-9]+.[0-9]+</strong>'
	while read -a LINE; do
		[ "${LINE[0]}" == \<td\>stable:\</td\> ] && CORRECT="true"
		if [[ "$CORRECT" == "true" && "${LINE[@]}" =~ $RE ]]; then
			IFS="<" read -a SUB <<< "${LINE[@]}"
			printf "%s\n" "${SUB[2]/*>}"
			break
		fi
	done <<< "$(/usr/bin/wget -q "$KERN_URL" -O -)"
}

#--------------------------------------------------PACKAGES UNABLE TO BE DOWNLOADED

official_repo_pkg_dl_status(){
	/bin/sed -n '/no longer be downloaded/s/^.*\s\([0-9]\+\)\spackage.*$/\1/p'\
		<<< "$(/usr/bin/ubuntu-support-status)"
}

#-------------------------------------------------PACKAGES UNSUPPORTED BY CANONICAL

official_repo_pkg_sup_status(){
	/bin/sed -n '/that \w\+ unsupported/s/^.*\s\([0-9]\+\)\spackage.*$/\1/p'\
		<<< "$(/usr/bin/ubuntu-support-status)"
}

#--------------------------------------------------NUMBER OF FILES MODIFIED IN <=1m

user_modified_files(){
	readarray X <<< "$(/usr/bin/find $HOME/ -mmin -1 2> /dev/null)"
	printf "%2d" "${#X[@]}"
}

#----------------------------------------------------------NUMBER OF OPEN TERMINALS

open_terms(){
	read -a X <<< `/bin/pidof "$TERMINAL"`
	printf "%2d" "${#X[@]}"
}

#------------------------------------------------------------------GITHUB FOLLOWERS

github_follows(){
	read -a FETCH <<< "$(
		while read LINE; do
			[[ "$LINE" =~ ^[0-9]+$ ]] && printf "%d " "${LINE//[!0-9]}"
		done <<< "$(/usr/bin/wget -q "$GH_URL?tab=followers" -O -)"
	)"

	printf "%2d" "${FETCH[2]}"
}

#--------------------------------------------------------------GITHUB CONTRIBUTIONS

github_contribs(){
	while read -a X; do
		if [[ "${X[0]}${X[1]}" =~ ^[0-9,]+contributions$ ]]; then
			printf "%'6d\n" "${X[0]//,}"
			break
		fi
	done <<< "$(/usr/bin/wget -q "$GH_URL" -O -)"
}

#--------------------------------------------------------------------CALL FUNCTIONS

case "$1" in
	01) open_terms & ;;
	02) user_modified_files & ;;
	03) official_repo_pkg_sup_status & ;;
	04) official_repo_pkg_dl_status & ;;
	05) latest_stable_kernel & ;;
	06) io_condition & ;;
	07) storage_device_count & ;;
	08) time_show & ;;
	09) date_show & ;;
	10) cpu_temp & ;;
	11) listening_tcp_count & ;;
	12) estab_tcp_count & ;;
	13) session_ul_total & ;;
	14) session_dl_total & ;;
	15) root_space_used_mb & ;;
	17) home_space_used_mb & ;;
	19) swap_used_mb & ;;
	21) ram_used_mb & ;;
	23) countdown & ;;
	24) input_volume_pacmd & ;;
	26) output_volume_pacmd & ;;
	27) cpu_freq & ;;
	28) kernel_check & ;;
	29) avg_cpu_usage & ;;
	30) session_uptime & ;;
	32) max_proc_usage & ;;
	33) net_status & ;;
	34) mount_count & ;;
	35) user_count & ;;
	36) open_files_count & ;;
	37) mocp_info & ;;
	38) psa_count & ;;
	40) usb_count & ;;
	42) apt_pkg_changes & ;;
	43) ytsubcount & ;;
	44) github_follows & ;;
	45) github_contribs & ;;
	46) ytviewcount & ;;
	47) show_date_time & ;;
	48) listening_estab_tcp_count & ;;
	49) rough_cpu_usage & ;;
	50) session_ul_dl_total & ;;
esac

# vim: noexpandtab colorcolumn=84 tabstop=8 noswapfile nobackup
