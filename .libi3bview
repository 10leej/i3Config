#!/bin/bash

#----------------------------------------------------------------------------------
# Project Name      - $HOME/.libi3bview
# Started On        - Wed  8 Mar 18:41:22 GMT 2017
# Last Change       - Tue  6 Feb 17:18:53 GMT 2018
# Author E-Mail     - terminalforlife@yahoo.com
# Author GitHub     - https://github.com/terminalforlife
#----------------------------------------------------------------------------------
# This was written for Ubuntu and Ubuntu-based distributions of Linux, with i3-wm.
# However, the outputs these functions offer can still be used outside of i3-wm.
#----------------------------------------------------------------------------------

#TODO - Use absolute paths for all executables.
#TODO - Do away with as many instances of sed as possible.

[ $UID -eq 0 ] && exit 1

#---------------------------------------------------------------------YOUR SETTINGS

YT_URL="https://www.youtube.com/channel/UCfp-lNJy4QkIGnaEE6NtDSg"
YT_PAD=3
IFACE="enp3s0"
CORES=4
ROOT_DEV="/dev/sda1"
ROOT_DEV_PAD=7
HOME_DEV="/dev/sdb1"
HOME_DEV_PAD=7
CD_TARGET="2018-12-25"
TERMINAL="terminology"

#----------------------------------------------------------YOUTUBE SUBSCRIBER COUNT

ytsubcount(){
	while read LINE; do
		if [[ "$LINE" =~ [0-9]+\ subscribers\"\>[0-9]+ ]]; then
			for FIELD in $LINE; {
				if [[ "$FIELD" =~ subscribers\"\>[0-9]+\</span\> ]]; then
					RESULT="${FIELD//[!0-9]}"
	
					if [[ "$RESULT" =~ ^[0-9]+$ ]]; then
						printf "%${YT_PAD}d" "$RESULT"
					fi
	
					break 2
				fi
			}
		fi
	done <<< "$(/usr/bin/wget -q "$YT_URL" -O -)"
}

#-----------------------------------------------------------UPGRADE COUNT (apt-get)

upgrade_count(){
	OPT='APT::Get::Show-User-Simulation-Note=false'

        while read -a X; do
                if [[ "${X[*]}" == *not\ to\ upgrade. ]]; then                         
                        SUM="$((${X[0]}+${X[3]}))"                                     
			printf "%2d" "$SUM"
                        break                                                          
                fi      
        done <<< "$(/usr/bin/apt-get -o $OPT -qs dist-upgrade)"
}

#--------------------------------------------------------CONNECTED USB DEVICE COUNT

usb_count(){
	declare -i D=0
	while read; do D+=1; done <<< "$(/usr/bin/lsusb)"
	printf "%2d\n" "$D"
}

#--------------------------------------------------------COUNT OF PROCESSES (ps -a)

psa_count(){
	read -a PIDS <<< `/bin/ps --user ichy -ax -o pid=`
	printf "%'3d\n" "${#PIDS[@]}"
}

#-----------------------------------------------------------MOCP CURRENT TRACK INFO

mocp_info(){
	STATUS=`/usr/bin/mocp -i`
	if [ "${STATUS/* }" = "STOP" ]; then
		printf "00:00"
	else
		/usr/bin/mocp -Q %tl
	fi
}

#------------------------------------------------------------------OPEN FILES COUNT

open_files_count(){
	declare -i D=0
	while read; do
		D+=1
	done <<< "$(/usr/bin/lsof -Pn -u $USER 2> /dev/null)"
}

#------------------------------------------------------------------------USER COUNT

user_count(){
	declare -i D=0

	if [ -x /usr/bin/users ]; then
		read -a X <<< "$(/usr/bin/users)"
		printf "%2d" "${#X[@]}"
	elif [ -x /usr/bin/uptime ]; then
		while read -a X; do
			if [[ "${X[3]}" =~ [0-9]+ ]]; then
				printf "%s\n" "${X[3]}"
				break
			fi
		done <<< "$(/usr/bin/uptime)"
	else
		printf "!"
	fi
}

#--------------------------------------------------------STORAGE DEVICE MOUNT COUNT

mount_count(){
	GET=(`/bin/lsblk -rno mountpoint`)
	printf "%2d" "${#GET[@]}"
}

#-----------------------------------------------------------INTERNET STATUS (iface)

net_status(){
	while read -a X; do
		if [ "${X[1]%:}" == "$IFACE" -a "${X[7]}" == "state" ]; then
			printf -v Z "${X[8]}"
			break
		fi
	done <<< "$(/bin/ip link)"
	[ "$Z" == "UP" ] && printf "[0]" || printf "[1]"
}

#--------------------------------------------------------MOST CPU-DEMANDING PROCESS

max_proc_usage(){
	read -a X <<< "$(/bin/ps -aU $USER -o %cpu=,pid= -k -%cpu)"
	printf "%3d (%.5d)\n" "${X[0]}" "${X[1]}"
}

#----------------------------------------------------------------COUNT OF PROCESSES 

many_processes(){
	local A=""
	for ITEM in *; {
		{ [ -d "$ITEM" ] && [[ "$ITEM" =~ [0-9]+ ]]; } && A+="$ITEM "
	}

	declare -i D=0
	for I in $A; { D+=1; }
	printf "%3d\n" "$D"
}

#--------------------------------------------------------------------SESSION UPTIME

session_uptime(){
	while read -a X; do
		[ "${X[1]}" == "up" ] && {
			printf "%3d\n" "${X[2]%,}"
			break
		}
	done <<< "$(/usr/bin/uptime)"
}

#-----------------------------------------------------------------AVERAGE CPU USAGE

avg_cpu_idle(){
	while read -a X; do
		[ ${L:-1} -eq 0 ] && Y="${X[5]}"
		[ "${X[0]}" == "avg-cpu:" ] && L=0
	done <<< "$(/usr/bin/iostat -c)"
	printf "%3d%%\n" "${Y%.*}"
}

#------------------------------------------------------------KERNEL VERSION DISPLAY

kernel_check(){
	K="/proc/sys/kernel/osrelease"
	[ -f "$K" -a -r "$K" ] && printf "%19s" "`< $K`"
}

#---------------------------------------------------------CPU FREQUENCY (QUAD-CORE)

cpu_freq(){
	declare -a B=()
	for FILE in /sys/devices/system/cpu/cpufreq/policy*/scaling_cur_freq; {
		read V < "$FILE" && B+=($V)
	}

	declare -i A=0
	for FREQ in ${B[@]}; { A+=$FREQ; }
	printf "%-0.4bMHz\n" "$((A/CORES))"
}

#-----------------------------------------------------------PLAYBACK VOLUME (pactl)

master_volume_pactl(){
	while read -a X; do
		if [ "${X[0]}" == "Volume:" ]; then
			printf "%d%%\n" "$((${X[4]%\%}-1))"
			break
		fi
	done <<< "$(/usr/bin/pactl list sinks)"
}

#--------------------------------------------------------MICROPHONE STATUS (amixer)

mic_status(){
	while read -a X; do
		if [ "${X[0]}" == "Volume:" ]; then
			if [ "$FIRST" == "true" ]; then
				printf "%3d%%" "${X[4]%\%}"
				break
			fi

			FIRST="true"
		fi
	done <<< "$(/usr/bin/pactl list sources)"
}

#---------------------------------------------------------COUNTDOWN UNTIL (SECONDS)

countdown(){
	printf -v NOW "%(%F)T\n" "-1"
	RESULT=$((`/bin/date -d "$CD_TARGET" +%s` - `printf '%(%s)T'`))
	printf "%'10d" "$RESULT"
}

#--------------------------------------------------------------------RAM USED IN MB

ram_used_mb(){
	while read -a X; do
		if [ "${X[0]}" == "Mem:" ]; then
			printf "%'6dM\n" "${X[2]}"
		fi
	done <<< "$(/usr/bin/free -m)"
}

#-------------------------------------------------------------------SWAP USED IN MB

swap_used_mb(){
	while read -a X; do
		if [ "${X[0]}" == "Swap:" ]; then
			printf "%'6dM\n" "${X[2]}"
		fi
	done <<< "$(/usr/bin/free -m)"
}

#----------------------------------------------------------USED SPACE IN HOME IN MB

home_space_used_mb(){
	while read -a X; do
		if [ "${X[0]}" == "$HOME_DEV" ]; then
			printf "%'${HOME_DEV_PAD}dM\n" "${X[2]}"
		fi
	done <<< "$(/bin/df -m)"
}

#----------------------------------------------------------USED SPACE IN ROOT IN MB

root_space_used_mb(){
	while read -a X; do
		if [ "${X[0]}" == "$ROOT_DEV" ]; then
			printf "%'${ROOT_DEV_PAD}dM\n" "${X[2]}"
		fi
	done <<< "$(/bin/df -m)"
}

#------------------------------------------------------------SESSION DOWNLOAD TOTAL

session_dl_total(){
	while read -a X; do
		if [ "${X[0]}" == "$IFACE:" ]; then
			printf "%'5dM" "$((${X[9]}/1024/1024))"
		fi
	done < /proc/net/dev
}

#--------------------------------------------------------------SESSION UPLOAD TOTAL

session_ul_total(){
	while read -a X; do
		if [ "${X[0]}" == "$IFACE:" ]; then
			printf "%'5dM" "$((${X[1]}/1024/1024))"
		fi
	done < /proc/net/dev
}

#------------------------------------------------------------------ACTIVE TCP COUNT

active_tcp_count(){
	while read -a X; do
		if [ "${X[0]}" == "TCP:" ]; then
			printf "%3d" "${X[3]%,}"
		fi
	done <<< "$(/bin/ss -s -n)"
}

#---------------------------------------------------------------LISTENING TCP COUNT

listening_tcp_count(){
	readarray X <<< "$(/bin/ss --tcp -l -n)"
	printf "%3d" "$((${#X[@]}-1))"
}

#-------------------------------------------------------------------CPU TEMPERATURE

cpu_temp(){
	while read -a X; do
		[ "${X[0]}${X[2]}" == "Physical0:" ] && LINE="true"
		if [ "${X[0]}" == "temp1_input:" -a "$LINE" == "true" ]; then
			printf "%2dÂ°C" "${X[1]%.*}"
			break
		fi
	done <<< "$(/usr/bin/sensors -u)"
}

#-------------------------------------------------------------------------SHOW DATE

date_show(){
	printf "%(%d/%m/%Y)T"
}

#-------------------------------------------------------------------------SHOW TIME

time_show(){
	printf "%(%l:%M:%S %p)T "
}

#--------------------------------------------------------------STORAGE DEVICE COUNT

storage_device_count(){
	readarray X < /proc/partitions
	printf "%2d" "$((${#X[@]}-2))"
}

#------------------------------------------------------LATEST STABLE KERNEL VERSION

latest_stable_kernel(){
	KERN_URL="https://www.kernel.org/"
	RE='<strong>[0-9]+.[0-9]+.[0-9]+</strong>'
	
	while read -a LINE; do
		[ "${LINE[0]}" == \<td\>stable:\</td\> ] && CORRECT="true"
	
		if [ "$CORRECT" == "true" ]; then
			if [[ "${LINE[@]}" =~ $RE ]]; then	
				IFS="<" read -a SUB <<< "${LINE[@]}"
				printf "%s\n" "${SUB[2]/*>}"
				break
			fi
		fi
	done <<< "$(/usr/bin/wget -q "$KERN_URL" -O -)"
}

#--------------------------------------------------PACKAGES UNABLE TO BE DOWNLOADED

official_repo_pkg_dl_status(){
	/bin/sed -n '/no longer be downloaded/s/^.*\s\([0-9]\+\)\spackage.*$/\1/p'\
		<<< "$(/usr/bin/ubuntu-support-status)"
}

#-------------------------------------------------PACKAGES UNSUPPORTED BY CANONICAL

official_repo_pkg_sup_status(){
	/bin/sed -n '/that \w\+ unsupported/s/^.*\s\([0-9]\+\)\spackage.*$/\1/p'\
		<<< "$(/usr/bin/ubuntu-support-status)"
}

#---------------------------------------------------NUMBER OF FILES MODIFIED IN <1m

ltonemin_userfiles_modtime(){
	readarray X <<< "$(/usr/bin/find $HOME/ -mmin -1 2> /dev/null)"
	printf "%2d" "${#X[@]}"
}

#----------------------------------------------------------NUMBER OF OPEN TERMINALS

open_terms(){
	read -a X <<< `/bin/pidof "$TERMINAL"`
	printf "%2d" "${#X[@]}"
}

#--------------------------------------------------------------------CALL FUNCTIONS

case "$1" in
	01) open_terms & ;;
	02) ltonemin_userfiles_modtime & ;;
	03) official_repo_pkg_sup_status & ;;
	04) official_repo_pkg_dl_status & ;;
	05) latest_stable_kernel & ;;
	06) io_condition & ;;
	07) storage_device_count & ;;
	08) time_show & ;;
	09) date_show & ;;
	10) cpu_temp & ;;
	11) listening_tcp_count & ;;
	12) active_tcp_count & ;;
	13) session_ul_total & ;;
	14) session_dl_total & ;;
	15) root_space_used_mb & ;;
	17) home_space_used_mb & ;;
	19) swap_used_mb & ;;
	21) ram_used_mb & ;;
	23) countdown & ;;
	24) mic_status & ;;
	26) master_volume_pactl & ;;
	27) cpu_freq & ;;
	28) kernel_check & ;;
	29) avg_cpu_idle & ;;
	30) session_uptime & ;;
	31) many_processes & ;;
	32) max_proc_usage & ;;
	33) net_status & ;;
	34) mount_count & ;;
	35) user_count & ;;
	36) open_files_count & ;;
	37) mocp_info & ;;
	38) psa_count & ;;
	40) usb_count & ;;
	41) sbar_noti & ;;
	42) upgrade_count & ;;
	43) ytsubcount & ;;
esac
